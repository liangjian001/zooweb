<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:p="http://www.springframework.org/schema/p" 
 xmlns:int="http://www.springframework.org/schema/integration"
 xmlns:rabbit="http://www.springframework.org/schema/rabbit"
 xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
 xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/integration 
	http://www.springframework.org/schema/integration/spring-integration.xsd
	http://www.springframework.org/schema/rabbit 
	http://www.springframework.org/schema/rabbit/spring-rabbit.xsd 
	http://www.springframework.org/schema/integration/amqp 
	http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd">
	
     <description>rabbitmq 连接服务配置</description>
     
     <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">            
        <!-- 核心线程数，默认为1 -->            
        <property name="corePoolSize" value="10" />            
        <!-- 最大线程数，默认为Integer.MAX_VALUE -->            
        <property name="maxPoolSize" value="50" />            
        <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->            
        <property name="queueCapacity" value="1000" />            
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->            
        <property name="keepAliveSeconds" value="300" />            
        <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->            
        <property name="rejectedExecutionHandler">            
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->            
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->            
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->            
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->            
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />            
        </property>            
    </bean>  
    
    <!-- spring-rabbit使用1.6版本，spring 4.2以上才可以支持使用注解方式配置 -->
	<!--配置connection-factory，指定连接rabbit server参数host和port可以一块写成：addresses="10.1.39.62:5672"-->
	<rabbit:connection-factory id="connectionFactory" host="${rmq.host}" port="${rmq.port}" virtual-host="${rmq.virtualHost}" 
		username="${rmq.username}" password="${rmq.password}" /> 
		
	<!-- 测试对比 -->
	<bean id="connectionFactory2"  class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">    
		<constructor-arg value="localhost" />        
		<property name="host" value="10.1.39.62" />
        <property name="port" value="5672" />
        <property name="username" value="user01" />
        <property name="password" value="123456" />
        <property name="virtualHost" value="test_host" />
        <property name="publisherConfirms" value="true"/>
        <property name="publisherReturns" value="true"/>
    </bean>

	<!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
	<rabbit:admin id="connectAdmin" connection-factory="connectionFactory" />
	<!--
	<bean id="connectAdmin" class="org.springframework.amqp.rabbit.core.RabbitAdmin">
        <constructor-arg ref="connectionFactory" />
    </bean> -->

    <!-- queue 队列声明 需要发送消息到哪些队列-->  
	<!-- 消息系统监听队列 -->  
    <rabbit:queue id="message_queue" name="message_queue" durable="true" auto-delete="false" 
    exclusive="false" declared-by="connectAdmin"/> 

	<!-- exchange queue binging key 绑定 -->  
    <rabbit:topic-exchange id="message-exchange" name="message-exchange" durable="true" auto-delete="false" declared-by="connectAdmin">  
        <rabbit:bindings>  
            <rabbit:binding queue="message_queue" pattern="resultinfo.*" />  
        </rabbit:bindings>  
    </rabbit:topic-exchange>

    <!-- spring amqp默认的是jackson 的一个插件,目的将生产者生产的数据转换为json存入消息队列，
                  由于fastjson的速度快于jackson,这里替换为fastjson的一个实现 -->  
    <bean id="jsonMessageConverter" class="com.zooweb.web.rabbitmq.FastJsonMessageConverter"/>
    
    <!-- 与上面对比--> 
    <bean id="serializerMessageConverter"  class="org.springframework.amqp.support.converter.SimpleMessageConverter" />
       
    <!-- spring template声明-->  
    <rabbit:template id="amqpTemplate" exchange="message-exchange" connection-factory="connectionFactory"  message-converter="jsonMessageConverter"/>  
    
    <!-- 创建rabbitTemplate 消息模板类   对比-->
    <bean id="rabbitTemplate" class="org.springframework.amqp.rabbit.core.RabbitTemplate">    
        <constructor-arg ref="connectionFactory2"></constructor-arg>
        <property name="exchange" value="message-exchange" />
        <property name="routingKey" value="message.tonson" />
        <property name="queue" value="message_queue" />
        <property name="messageConverter" ref="serializerMessageConverter" />
    </bean>
    
    <!-- 默认消息处理类，可以重写 -->  
	<bean id="messageHandler" class="com.zooweb.web.rabbitmq.MessageHandler"></bean>
      
    <!-- 用于消息的监听的代理类MessageListenerAdapter -->
    <bean id="messageQueueListenerAdapter"    
        class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter">    
        <constructor-arg ref="messageHandler" />    
        <property name="defaultListenerMethod" value="handleMessage"></property>    
        <property name="messageConverter" ref="jsonMessageConverter"></property>    
    </bean>   
      
    <!-- 监听容器 -->  
    <rabbit:listener-container  
        connection-factory="connectionFactory" acknowledge="auto" task-executor="taskExecutor">  
        <rabbit:listener queues="message_queue" ref="messageQueueListenerAdapter" />  
    </rabbit:listener-container>
    
    <bean id="messageSender" class="com.zooweb.web.rabbitmq.MessageSender">    
         <property name="amqpTemplate" ref="amqpTemplate"></property>    
    </bean>  

	
</beans>