<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:task="http://www.springframework.org/schema/task"  
    xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"  
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop.xsd 
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd
		">

    <!-- 1.配置数据库、消息队列等相关参数properties的属性：${url} -->
    <context:property-placeholder location="classpath:jdbc.properties,classpath:rabbitmq.properties" ignore-unresolvable="true"/>
    
    <!--  
    <bean id = "propertyConfigurer" class ="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
       <property name = "locations">    
           <list>    
                 <value>/WEB-INF/classes/dbconfig.properties</value>    
            </list>    
        </property>    
    </bean>-->
    
    <!-- 2.配置数据源 使用的是Druid数据源 -->
	<!-- 配置这个数据源的name属性的意义在于，如果存在多个数据源，监控的时候 可以通过名字来区分开来。如果没有配置，将会生成一个名字， 
		  格式是："DataSource-" + System.identityHashCode(this) -->
	<bean id="druidDataSource" name="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<!--initialSize:初始化连接大小    -->
		<property name="initialSize" value="0" />
		<!--maxActive:连接池最大使用连接数量  -->
		<property name="maxActive" value="20" />
		<!-- minIdle:连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- maxWait:获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- timeBetweenEvictionRunsMillis:配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- minEvictableIdleTimeMillis:配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- removeAbandoned:超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- removeAbandonedTimeout:1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- logAbandoned:关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- filters:监控数据库 -->
		<property name="filters" value="mergeStat" />
		<!--property name="filters" value="wall,mergeStat,slf4j" / -->
		<!-- 该处和下面的可选项proxyFilters一样的效果
		<property name="connectionProperties"
			value="druid.stat.slowSqlMillis=1000;druid.stat.logSlowSql=true;druid.stat.mergeSql=true" />-->
	    <!-- 可选项 -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
            </list>
        </property>
	</bean>
	<!-- 可选项 druid监控统计bean 对应上文druidDataSource中的proxyFilters -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="1000" />
        <property name="logSlowSql" value="true" />
        <property name="mergeSql" value="true" />
    </bean>
    
    <!-- 3.配置SqlSessionFactory对象  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="druidDataSource"/>
		<!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 扫描entity包 使用别名 -->
		<property name="typeAliasesPackage" value="classpath:com/zooweb/modle/entities" />
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*/*.xml" />
		<!--<property name="mapperLocations">  
            <list>  
                <value>classpath:mapper/*/*.xml</value>
            </list>  
        </property>--> 
	</bean>
	
	<!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!--给出需要扫描自定义的持久层 mapper接口包 -->
		<property name="basePackage" value="com.zooweb.persistence.mapper" />
	</bean>
	
	<!-- 5.扫描service,dao包下所有使用注解的类型 用*扫描全部或分别指定扫描
	<context:component-scan base-package="com.zooweb.*" />
	-->
	<context:component-scan base-package="com.zooweb.persistence.dao" />
	<context:component-scan base-package="com.zooweb.business" />

	<!--其实这里类的实例就是mybatis中SQLSession -->  
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">  
        <constructor-arg index="0">  
            <ref bean="sqlSessionFactory" />  
        </constructor-arg>  
    </bean>
    
	<!-- 6.配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="druidDataSource" />
	</bean>
	
	<!-- 7.配置基于注解的声明式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
    <!-- 激活annotation功能 向 Spring 容器注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、
		PersistenceAnnotationBeanPostProcessor 以及 RequiredAnnotationBeanPostProcessor 这 4 个BeanPostProcessor,
		注册这4个 BeanPostProcessor的作用，就是为了你的系统能够识别相应的注解
    <context:annotation-config />-->
    
    <!-- <context:spring-configured/>主要是通过Spring管理AnnotationBeanConfigurerAspect切面,具体的工作由该切面完成
    <context:spring-configured /> -->
    
    <!--自动扫描含有@Service将其注入为bean,该配置项其实也包含了自动注入上述processor的功能，
                因此当使用 <context:component-scan/> 后，就可以将 <context:annotation-config/> 移除了。
    -->
    
    <!-- 8.rabbitmq消息队列配置 -->
 	<import resource="classpath:spring/spring-rabbitmq.xml" />
 	
 	<!-- 9.dubbo服务配置 -->
 	<!-- 提供方应用信息，用于计算依赖关系,这个和client没必要一致 -->
 	<dubbo:application name="mytest-provider" />
 	<!-- 使用multicast广播注册中心暴露服务地址 -->  
    <!-- <dubbo:registry address="multicast://192.168.0.101:2181" /> -->
 	<!-- 使用zookeeper广播注册中心暴露服务地址 -->  
    <!-- <dubbo:registry  protocol="zookeeper"  address="10.1.39.62:2181"/>-->
    <!--和上面的配置是一样的效果  -->  
    <!-- <dubbo:registry address="zookeeper://192.168.0.101:2181" />  -->
    <!-- 注册中心配置  本机 伪集群 测试 -->
    <dubbo:registry protocol="zookeeper" address="10.1.39.62:2181,10.1.39.62:2182,10.1.39.62:2183"  />
 	<!-- 用dubbo协议在20881端口暴露服务 协议配置，用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受。-->  
    <dubbo:protocol name="dubbo" port="20881" />
    
    <!-- 监控中心配置，protocol="registry"，表示从注册中心发现监控中心地址  
    <dubbo:monitor protocol="registry"/>-->
    <!-- 当ProtocolConfig和ServiceConfig某属性没有配置时,采用此缺省值 -->
    <dubbo:provider timeout="30000" threadpool="fixed" threads="100" accepts="1000" />
    
    <!-- 声明需要暴露的服务接口 -->
    <dubbo:service interface="com.zooweb.api.service.user.SysUserInfoService" ref="myTestService" retries="0"/>
    <!-- 和本地bean一样实现服务 -->  
    <bean id="myTestService" class="com.zooweb.business.rpcimpl.user.SysUserInfoServiceImpl"/>
 	
</beans>
