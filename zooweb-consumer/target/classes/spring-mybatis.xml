<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		">
		
	<!-- 配置数据源 使用的是Druid数据源 -->
	<!-- 配置这个数据源的name属性的意义在于，如果存在多个数据源，监控的时候 可以通过名字来区分开来。如果没有配置，将会生成一个名字， 
		  格式是："DataSource-" + System.identityHashCode(this) -->
	<bean id="druidDataSource" name="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<!--initialSize:初始化连接大小    -->
		<property name="initialSize" value="0" />
		<!--maxActive:连接池最大使用连接数量  -->
		<property name="maxActive" value="20" />
		<!-- minIdle:连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- maxWait:获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- timeBetweenEvictionRunsMillis:配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- minEvictableIdleTimeMillis:配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- removeAbandoned:超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- removeAbandonedTimeout:1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- logAbandoned:关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- filters:监控数据库 -->
		<property name="filters" value="mergeStat" />
		<!--property name="filters" value="wall,mergeStat,slf4j" / -->
		<!-- 该处和下面的可选项proxyFilters一样的效果
		<property name="connectionProperties"
			value="druid.stat.slowSqlMillis=1000;druid.stat.logSlowSql=true;druid.stat.mergeSql=true" />-->
	    <!-- 可选项 -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
            </list>
        </property>
	</bean>
	
	<!-- 可选项 druid监控统计bean 对应上文druidDataSource中的proxyFilters -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="1000" />
        <property name="logSlowSql" value="true" />
        <property name="mergeSql" value="true" />
    </bean>
	
<!-- 	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" >     -->
<!--        数据库基本信息配置   -->
<!--        <property name = "url" value = "${url}" />     -->
<!--        <property name = "username" value = "${username}" />     -->
<!--        <property name = "password" value = "${password}" />     -->
<!--        <property name = "driverClassName" value = "${driverClassName}" />     -->
<!--        <property name = "filters" value = "${filters}" />     -->
<!--        最大并发连接数   -->
<!--        <property name = "maxActive" value = "${maxActive}" />   -->
<!--        初始化连接数量   -->
<!--        <property name = "initialSize" value = "${initialSize}" />   -->
<!--        配置获取连接等待超时的时间   -->
<!--        <property name = "maxWait" value = "${maxWait}" />   -->
<!--        最小空闲连接数   -->
<!--        <property name = "minIdle" value = "${minIdle}" />     -->
<!--        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒   -->
<!--        <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />   -->
<!--        配置一个连接在池中最小生存的时间，单位是毫秒   -->
<!--        <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />     -->
<!--        <property name = "validationQuery" value = "${validationQuery}" />     -->
<!--        <property name = "testWhileIdle" value = "${testWhileIdle}" />     -->
<!--        <property name = "testOnBorrow" value = "${testOnBorrow}" />     -->
<!--        <property name = "testOnReturn" value = "${testOnReturn}" />     -->
<!--        <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />   -->
<!--        打开 removeAbandoned 功能   -->
<!--        <property name = "removeAbandoned" value = "${removeAbandoned}" />   -->
<!--        1800 秒，也就是 30 分钟   -->
<!--        <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />   -->
<!--        关闭 abanded 连接时输出错误日志      -->
<!--        <property name="logAbandoned" value = "${logAbandoned}" />   -->
<!--   </bean>   -->

    <!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="druidDataSource"/>
		<!-- <property name="mapperLocations" value="classpath*:mapper/*/*.xml" /> -->
		<property name="mapperLocations">  
            <list>  
                <value>classpath:com/mapping/*/*.xml</value>
            </list>  
        </property>
	</bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
    <!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="druidDataSource" />
	</bean>

	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!-- Spring aop事务管理 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
	
</beans>